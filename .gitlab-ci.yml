stages:
  - test
  - build
  - deploy

default:
  interruptible: true

variables:
  RULES_CHANGES_PATH: "**/*"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

services:
  - docker:24.0-dind

.build-rules:
  image: docker:24.0-dind
  stage: build
  rules:
    - if: $CI_COMMIT_REF_NAME == "master"
      when: always
      variables:
        IMAGE_TAG: latest
    - if: $CI_COMMIT_REF_NAME == "dev"
      when: always
      variables:
        IMAGE_TAG: pre-release
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.base-rules:
  image: node:18-alpine
  interruptible: true
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: always
    - if: $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "$RULES_CHANGES_PATH"
    - when: manual
      allow_failure: true

.backend:
  extends: ".base-rules"
  before_script:
    - cd api
    - npm ci
  variables:
    RULES_CHANGES_PATH: api/**/*

.frontend:
  extends: ".base-rules"
  before_script:
    - cd frontend
    - npm ci
  variables:
    RULES_CHANGES_PATH: frontend/**/*

lint_api:
  stage: test
  extends: ".backend"
  script:
    - npm run lint

lint_client:
  stage: test
  extends: ".frontend"
  script:
    - npm run lint

code_quality:
  image: returntocorp/semgrep
  script: semgrep ci
  rules:
    - if: "$CI_MERGE_REQUEST_IID"
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  variables:
    SEMGREP_APP_TOKEN: "$SEMGREP_APP_TOKEN"

api_unit_tests:
  stage: test
  extends: ".backend"
  script:
    - npm run test:ci-gitlab
  artifacts:
    when: always
    reports:
      junit:
        - api/reports/junit.xml

e2e:
  stage: test
  image: cypress/browsers:node18.12.0-chrome107
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
      when: always
  script:
    - npm ci
    - npm run e2e
  artifacts:
    when: always
    paths:
      - test-results.xml
    reports:
      junit: test-results.xml

build-api:
  extends: ".build-rules"
  script:
    - cd api
    - docker build -t $CI_REGISTRY_IMAGE/api:$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE/api:$IMAGE_TAG

build-client:
  extends: ".build-rules"
  script:
    - cd frontend
    - docker build -t $CI_REGISTRY_IMAGE/client:$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE/client:$IMAGE_TAG

build-recommender:
  extends: ".build-rules"
  script:
    - cd recommender
    - docker build -t $CI_REGISTRY_IMAGE/recommender:$IMAGE_TAG .
    - docker push $CI_REGISTRY_IMAGE/recommender:$IMAGE_TAG

deploy:
  stage: deploy
  image: ubuntu:latest
  environment:
    name: production
    url: https://tastyplan.de
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: always
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker compose -f compose.yml -f compose.prod.yml down --volumes
    - docker compose -f compose.yml -f compose.prod.yml up -d 
    - docker compose -f compose.yml -f compose.prod.yml logs
  tags:
    - prod

deploy-staging:
  stage: deploy
  image: ubuntu:latest
  variables:
    TAG: pre-release
  environment:
    name: staging
    url: https://test.tastyplan.de
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - TAG=$TAG docker compose -f compose.yml -f compose.dev.yml up --wait --no-build --force-recreate -d 
    - TAG=$TAG docker compose -f compose.yml -f compose.dev.yml logs
  tags:
    - staging

#trigger-deploy-prod:
#  stage: deploy
#  image: ubuntu:latest
#  only:
#    - master
#  environment:
#    name: production
#    url: http://193.170.119.139
#  before_script:
#    - apt-get update -qq
#    - apt-get install -qq curl
#  script:
#    - 'curl --fail --request POST --form token=$TRIGGER_TOKEN --form ref=master "https://gitlab.mediacube.at/api/v4/projects/10184/trigger/pipeline"'
#
#trigger-deploy-staging:
#  stage: deploy
#  only:
#    - dev
#  environment:
#    name: Staging
#    url: http://193.170.119.147
#  variables:
#    TRIGGER_PIPELINE: deploy-staging
#    CI_USER: $CI_REGISTRY_USER
#    CI_PASSWORD: $CI_REGISTRY_PASSWORD
#    CI_REGISTRY: $CI_REGISTRY
#  trigger:
#    project: mmt-2022-masterproject-cookplaner/tastyplan-prod
#    branch: master
#    strategy: depend

sast:
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
semgrep-sast:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
nodejs-scan-sast:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
secret_detection:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
