# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- test
- build
- deploy
variables:
  RULES_CHANGES_PATH: "**/*"
  DOCKER_TLS_CERTDIR: ''
  DOCKER_DRIVER: overlay2
services:
- docker:20.10-dind
".build-rules":
  image: docker:20.10-dind
  stage: build
  only:
  - master
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
".base-rules":
  image: node:18-alpine
  interruptible: true
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
    when: always
  - if: $CI_PIPELINE_SOURCE == "push"
    when: never
  - if: "$CI_COMMIT_TAG"
    when: never
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - "$RULES_CHANGES_PATH"
  - when: manual
    allow_failure: true
".backend":
  extends: ".base-rules"
  before_script:
  - cd api
  - npm ci
  variables:
    RULES_CHANGES_PATH: api/**/*
".frontend":
  extends: ".base-rules"
  before_script:
  - cd frontend
  - npm ci
  variables:
    RULES_CHANGES_PATH: frontend/**/*
lint_api:
  stage: test
  extends: ".backend"
  script:
  - npm run lint
lint_client:
  stage: test
  extends: ".frontend"
  script:
  - npm run lint
build-api-image:
  extends: ".build-rules"
  script:
  - cd api
  - docker build -t $CI_REGISTRY_IMAGE/api:latest .
  - docker push $CI_REGISTRY_IMAGE/api:latest
build-client-image:
  extends: ".build-rules"
  script:
  - cd frontend
  - docker build -t $CI_REGISTRY_IMAGE/client:latest .
  - docker push $CI_REGISTRY_IMAGE/client:latest
deploy:
  stage: deploy
  image: ubuntu:latest
  only:
  - master
  before_script:
  - apt-get update -qq
  - apt-get install -qq git
  - which ssh-agent || ( apt-get install -qq openssh-client )
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$VM_ACCESS_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  environment:
    name: production
    url: http://193.170.119.139
  script:
  - ssh admin@193.170.119.139 -p 5412 "cd tastyplan-prod && sudo docker compose down
    && sudo docker system prune -a -f && sudo docker compose up -d && exit"
sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml
