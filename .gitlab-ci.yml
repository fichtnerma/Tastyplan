stages:
  - test
  - build
  - deploy

variables:
  RULES_CHANGES_PATH: "**/*"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
services:
  - docker:20.10-dind

.build-rules:
  image: docker:20.10-dind
  stage: build
  only:
     - master
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.base-rules:
  image: node:18-alpine
  interruptible: true
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - $RULES_CHANGES_PATH
    - when: manual
      allow_failure: true

.backend:
  extends: .base-rules
  before_script:
    - cd api
    - npm ci
  variables:
    RULES_CHANGES_PATH: "api/**/*"
  
.frontend:
  extends: .base-rules
  before_script:
    - cd frontend
    - npm ci
  variables:
    RULES_CHANGES_PATH: "frontend/**/*"

lint_api:
  stage: test
  extends: .backend
  script:
    - npm run lint

lint_client:
  stage: test
  extends: .frontend
  script:
    - npm run lint

code_quality:
  # A Docker image with Semgrep installed.
  image: returntocorp/semgrep
  # Run the "semgrep ci" command on the command line of the docker image.
  script: semgrep ci

  rules:
  # Scan changed files in MRs, (diff-aware scanning):
  - if: $CI_MERGE_REQUEST_IID

  # Scan mainline (default) branches and report all findings.
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  variables:
    # Connect to Semgrep Cloud Platform through your SEMGREP_APP_TOKEN.
    # Generate a token from Semgrep Cloud Platform > Settings
    # and add it as a variable in your GitLab CI/CD project settings.
    SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN

build-api-image:
  extends: .build-rules
  script:
    - cd api
    - docker build -t $CI_REGISTRY_IMAGE/api:latest .
    - docker push $CI_REGISTRY_IMAGE/api:latest

build-client-image:
  extends: .build-rules
  script:
    - cd frontend
    - docker build -t $CI_REGISTRY_IMAGE/client:latest .
    - docker push $CI_REGISTRY_IMAGE/client:latest

deploy:
  stage: deploy
  image: ubuntu:latest
  only :
    - master
  before_script:
    - apt-get update -qq
    - apt-get install -qq git
    # Setup SSH deploy keys
    - 'which ssh-agent || ( apt-get install -qq openssh-client )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$VM_ACCESS_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  environment:
    name: production
    url: http://193.170.119.139
  script:
    - ssh admin@193.170.119.139 -p 5412 "cd tastyplan-prod && sudo docker compose down && sudo docker system prune -a -f && sudo docker compose up -d && exit"