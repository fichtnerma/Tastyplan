// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Ingredient {
    id                   Int                    @id @default(autoincrement())
    name                 String
    categories           String
    subcategories        String?
    allergens            String[]
    fat                  Float?
    carbs                Float?
    protein              Float?
    calories             Float?
    calcium              Float?
    iron                 Float?
    magnesium            Float?
    foodDislikes         Preferences[]
    IngredientWithAmount IngredientWithAmount[]
    ShoppingListEntry    ShoppingListEntry[]
}

model Recipe {
    id                  Int                    @id @default(autoincrement())
    name                String
    img                 String?
    description         String?
    cookingTime         Int?
    preparingTime       Int
    totalTime           Int
    servings            Int
    tags                String[]
    formOfDiet          String
    ingredients         IngredientWithAmount[]
    steps               Step[]
    weekplanEntryRecipe WeekplanEntry[]
    Favorites           Favorites[]
}

model IngredientWithAmount {
    id           Int         @id @default(autoincrement())
    unit         String?
    condition    String?
    quantity     Float?
    ingredientId Int?
    ingredient   Ingredient? @relation(fields: [ingredientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    recipeId     Int?
    recipe       Recipe?     @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Step {
    id          Int    @id @default(autoincrement())
    description String
    stepCount   Int
    recipeId    Int
    recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
    id       String  @id @default(uuid())
    userId   String  @unique
    password String?
    role     String  @default("USER")
    state    String  @default("registered")

    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @default(now()) @updatedAt
    Weekplan     Weekplan[]
    Preferences  Preferences[]
    ShoppingList ShoppingList[]
    Favorites    Favorites[]
}

model Preferences {
    id           Int          @id @default(autoincrement())
    userId       String       @unique
    user         User         @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    formOfDiet   String
    allergens    String[]
    foodDislikes Ingredient[]
    days         Int[]
    meals        Int[]
    servings     Int?
}

model DataSchema {
    id             Int     @id @default(1)
    ingredientHash String?
    recipeHash     String?
}

model Weekplan {
    id            Int             @id @default(autoincrement())
    userId        String
    user          User            @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    startDate     DateTime
    endDate       DateTime
    weekplanEntry WeekplanEntry[]
}

model Favorites {
    id       Int    @id @default(autoincrement())
    userId   String
    user     User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    recipeId Int
    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([userId, recipeId])
}

model WeekplanEntry {
    id         Int      @id @default(autoincrement())
    date       DateTime @db.Date
    weekplanId Int
    weekplan   Weekplan @relation(fields: [weekplanId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    recipeId   Int?
    recipe     Recipe?  @relation(fields: [recipeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model ShoppingList {
    id                  Int                 @id @default(autoincrement())
    userId              String
    user                User                @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
    shoppingListEntries ShoppingListEntry[]
}

model ShoppingListEntry {
    id             Int           @id @default(autoincrement())
    ingredientId   Int?
    ingredient     Ingredient?   @relation(fields: [ingredientId], references: [id])
    ingredientName String?
    unit           String?
    quantity       Float?
    isChecked      Boolean
    ShoppingList   ShoppingList? @relation(fields: [shoppingListId], references: [id])
    shoppingListId Int?
    category       String?
}
