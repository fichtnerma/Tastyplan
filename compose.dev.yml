version: '3.9'

services:
  reverseproxy:
    build:
        context: ./reverseproxy
        dockerfile: nginx.Dockerfile
    container_name: reverseproxy
    ports:
        - "443:443"
        - "80:80"
    restart: always
    depends_on:
        - api
        - frontend
    networks:
        - public
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
    ports:
      - 3000:3000
    command: "npm run start:prod:migrate"
  redis:
    ports:
      - 6379:6379
  postgres:
    container_name: postgres
    restart: unless-stopped
    ports:
      - "6543:5432"
    volumes:
      - postgresdata:/var/lib/postgresql/data
    networks:
      - private
      - public
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - 8080:8080
    environment:
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./frontend:/client
      - /client/node_modules
      - /client/.next
    networks:
      - public

  elasticsearch:
    container_name: elasticsearch
    env_file: .env
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_NODE=${ELASTIC_NODE}
    restart: unless-stopped
    networks:
      - private
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
  recommender:
    build:
      context: ./recommender
      dockerfile: Dockerfile.dev
    container_name: recommender
    ports:
      - 5001:5000
